{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["HABITS_NAME","getSavedHabits","JSON","parse","localStorage","getItem","saveHabits","data","setItem","stringify","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","name","target","value","setState","defineProperty","createHabit","current","uuid","did","didNot","alt","loadSavedData","habits","updateCount","meta","split","type","assign","saveCountIncrement","saved","state","newHabitName","_this2","react_default","a","createElement","className","keys","map","key","onClick","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAIMA,EAAc,SA+EpB,SAASC,IACR,OAAOC,KAAKC,MAAMC,aAAaC,QAAQL,IAGxC,SAASM,EAAYC,GACpBH,aAAaI,QAAQR,EAAaE,KAAKO,UAAUF,IAkBnCG,kBAnGd,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAUPQ,aAAe,SAACC,GACf,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACvBX,EAAKY,SAALX,OAAAY,EAAA,EAAAZ,CAAA,GAAgBQ,EAAOE,KAdLX,EAiBnBc,YAAc,SAACL,GAAD,OAAU,WACvB,IAAMM,EAAU1B,IAChB0B,EAAQC,OAAU,CAACP,OAAMQ,IAAK,EAAGC,OAAQ,EAAGC,IAAK,GACjDzB,EAAWqB,GACXf,EAAKoB,kBArBapB,EAwBnBoB,cAAgB,WACfpB,EAAKY,SAAS,CACbS,OAAQhC,OA1BSW,EA8BnBsB,YAAc,SAACd,GACd,IAAMe,EAAOf,EAAEE,OAAOD,KAAKe,MAAM,OAqDnC,SAA6BR,EAAMS,GAClC,IAAMJ,EAAShC,IACfK,EAAWO,OAAOyB,OACjBL,EADUpB,OAAAY,EAAA,EAAAZ,CAAA,GAGRe,EAAOf,OAAOyB,OACdL,EAAOL,GADAf,OAAAY,EAAA,EAAAZ,CAAA,GAGLwB,EAAOJ,EAAOL,GAAMS,GAAQ,OA5DhCE,CAAmBJ,EAAK,GAAIA,EAAK,IACjCvB,EAAKoB,iBA/BL,IAAMQ,EAAQvC,IACTuC,GAAOlC,EAAW,IACvB,IAAM2B,EAASO,GAAgB,GAJb,OAKlB5B,EAAK6B,MAAQ,CACZC,aAAc,GACdT,UAPiBrB,wEAoCV,IAAA+B,EAAA5B,KACDkB,EAAUlB,KAAK0B,MAAfR,OACP,OACCW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACblC,OAAOmC,KAAKf,GAAQgB,IAAI,SAAAC,GAAG,OAC3BN,EAAAC,EAAAC,cAAA,OAAKI,IAAKA,GACTN,EAAAC,EAAAC,cAAA,UAAKb,EAAOiB,GAAK7B,MACjBuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,WACEb,EAAOiB,GAAKrB,IACbe,EAAAC,EAAAC,cAAA,UACCzB,KAAM6B,EAAM,QACZC,QAASR,EAAKT,aAFf,QAKDU,EAAAC,EAAAC,cAAA,WACEb,EAAOiB,GAAKpB,OACbc,EAAAC,EAAAC,cAAA,UACCzB,KAAM6B,EAAM,WACZC,QAASR,EAAKT,aAFf,gBAQJU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,SACCzB,KAAK,eACLE,MAAOR,KAAK0B,MAAMC,aAClBU,SAAUrC,KAAKI,eAEhByB,EAAAC,EAAAC,cAAA,UACCK,QAASpC,KAAKW,YAAYX,KAAK0B,MAAMC,eADtC,sBApEaW,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ec40b2e.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport uuid from 'uuid/v1'\n\nconst HABITS_NAME = 'habits'\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tconst saved = getSavedHabits()\n\t\tif (!saved) saveHabits({})\n\t\tconst habits = saved ? saved : {}\n\t\tthis.state = {\n\t\t\tnewHabitName: '',\n\t\t\thabits\n\t\t}\n\t}\n\n\thandleChange = (e) => {\n\t\tconst name = e.target.name\n\t\tconst value = e.target.value\n\t\tthis.setState({[name]: value})\n\t}\n\n\tcreateHabit = (name) => () => {\n\t\tconst current = getSavedHabits();\n\t\tcurrent[uuid()] = {name, did: 0, didNot: 0, alt: 0}\n\t\tsaveHabits(current)\n\t\tthis.loadSavedData()\n\t}\n\n\tloadSavedData = () => {\n\t\tthis.setState({\n\t\t\thabits: getSavedHabits()\n\t\t})\n\t}\n\n\tupdateCount = (e) => {\n\t\tconst meta = e.target.name.split('--')\n\t\tsaveCountIncrement(meta[0], meta[1])\n\t\tthis.loadSavedData()\n\t}\n\n\trender() {\n\t\tconst {habits} = this.state\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{Object.keys(habits).map(key =>\n\t\t\t\t\t<div key={key}>\n\t\t\t\t\t\t<h3>{habits[key].name}</h3>\n\t\t\t\t\t\t<div className=\"habit\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{habits[key].did}\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tname={key + '--did'}\n\t\t\t\t\t\t\t\t\tonClick={this.updateCount}\n\t\t\t\t\t\t\t\t>Did</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{habits[key].didNot}\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tname={key + '--didNot'}\n\t\t\t\t\t\t\t\t\tonClick={this.updateCount}\n\t\t\t\t\t\t\t\t>Did Not</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div className=\"new-habit\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"newHabitName\"\n\t\t\t\t\t\tvalue={this.state.newHabitName}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t></input>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={this.createHabit(this.state.newHabitName)}\n\t\t\t\t\t>New Habit</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nfunction getSavedHabits () {\n\treturn JSON.parse(localStorage.getItem(HABITS_NAME))\n}\n\nfunction saveHabits (data) {\n\tlocalStorage.setItem(HABITS_NAME, JSON.stringify(data))\n}\n\nfunction saveCountIncrement (uuid, type) {\n\tconst habits = getSavedHabits()\n\tsaveHabits(Object.assign(\n\t\thabits,\n\t\t{\n\t\t\t[uuid]: Object.assign(\n\t\t\t\thabits[uuid],\n\t\t\t\t{\n\t\t\t\t\t[type]: habits[uuid][type] + 1\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t))\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}